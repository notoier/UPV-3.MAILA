function KanpokoEguzkiSistemarenDatuak(tend)
    u0, Gm, bodylist = DatosInicialesSistemaSolar()
    prob = ODEProblem(NbodyODE2!, u0, (0.,tend), Gm)
    n = 2000
    dt = tend/n
    sol = solve(prob,Vern9(),abstol=1e-14,reltol=1e-14,saveat=dt)
    datos_t = sol.t
    datos_u = [u[:,5:9,:] for u in sol.u]
    for k in 1:length(datos_t), i in 1:2, j in 1:3 
        datos_u[k][j,1,i] = -sum( Gm[6:9] .* datos_u[k][j,2:5,i] )/(sum(Gm[1:5])+sum(Gm[11:16]))
    end
    return datos_t[2:end], datos_u[2:end]
end



function KanpokoEguzkiSistemarenHasierakoDatuak(T=Float64)
GmMoon = convert(T,0.109318945074237400e-10)
GmEarth = convert(T,0.888769244512563400e-9)

Gm =convert.(T, [0.295912208285591100e-3, 0.491248045036476000e-10,
  0.724345233264412000e-9,
  GmEarth,
  0.954954869555077000e-10, 0.282534584083387000e-6,
  0.845970607324503000e-7, 0.129202482578296000e-7,
  0.152435734788511000e-7, 0.217844105197418000e-11, GmMoon,
# Ceres, Pallas, Vesta, Iris, Bamberga
  0.140047655617234400e-12,
  0.310444819893871300e-13,
  0.385475018780881000e-13,
  0.213643444257140700e-14,
  0.138862658985619900e-14
  ])


N=length(Gm)

q = convert.(T, [0.00450250878464055477, 0.00076707642709100705,
   0.00026605791776697764,
       0.36176271656028195477, -0.09078197215676599295,
-0.08571497256275117236,
     0.61275194083507215477, -0.34836536903362219295,
-0.19527828667594382236,
   0.12051741410138465477, -0.92583847476914859295,
-0.40154022645315222236,
   -0.11018607714879824523, -1.32759945030298299295,
-0.60588914048429142236,
   -5.37970676855393644523, -0.83048132656339789295,
-0.22482887442656542236,
   7.89439068290953155477, 4.59647805517127300705,
   1.55869584283189997764,
   -18.26540225387235944523, -1.16195541867586999295,
-0.25010605772133802236,
   -16.05503578023336944523, -23.94219155985470899295,
-9.40015796880239402236,
   -30.48331376718383944523, -0.87240555684104999295,
   8.91157617249954997764
])

v = convert.(T,[-0.00000035174953607552, 0.00000517762640983341,
   0.00000222910217891203,
        0.00336749397200575848, 0.02489452055768343341,
   0.01294630040970409203,
       0.01095206842352823448, 0.01561768426786768341,
   0.00633110570297786403,
   0.01681126830978379448,
   0.00174830923073434441, 0.00075820289738312913,
       0.01448165305704756448,
   0.00024246307683646861, -0.00028152072792433877,
       0.00109201259423733748, -0.00651811661280738459,
-0.00282078276229867897,
      -0.00321755651650091552, 0.00433581034174662541,
   0.00192864631686015503,
      0.00022119039101561468, -0.00376247500810884459,
-0.00165101502742994997,
      0.00264276984798005548, -0.00149831255054097759,
-0.00067904196080291327,
      0.00032220737349778078, -0.00314357639364532859,
-0.00107794975959731297
])
    
dqMoon = convert.(T,[-0.00080817735147818490, -0.0019946299854970130, -0.00108726268307068900])
dvMoon = convert.(T,[0.00060108481561422370, -0.00016744546915764980, -0.00008556214140094871]);

qq = copy(q)
vv = copy(v)



qEM = q[10:12]
qEarth = qEM - GmMoon/GmEarth*dqMoon
qMoon = qEarth + dqMoon
qq[10:12] .= qEarth

vEM = v[10:12]
vEarth = vEM - GmMoon/GmEarth*dvMoon
vMoon = vEarth + dvMoon
vv[10:12] .= vEarth



# Ceres, Pallas, Vesta, Iris, Bamberga
qsun=qq[1:3]
qCeres=qsun + convert.(T,[1.438681809676469747, -2.204373633189407045, -1.326397853361325874])
qPallas=qsun + convert.(T,[0.203832272462290465, -3.209619436062307152, 0.623843179079393351])
qVesta=qsun + convert.(T,[0.182371836377417107,  2.386628211277654010, 0.924596062836265498])
qIris=qsun + convert.(T,[1.892475267790300286, -0.848414748075139946, -0.157159319044464590])
qBamberga=qsun + convert.(T,[1.398759064223541682, -1.287476729008325105, -0.669098428660833799])

vsun=vv[1:3]
vCeres=vsun + convert.(T,[0.008465406136316316, 0.004684247977335608, 0.000466157738595739])
vPallas=vsun + convert.(T,[0.008534313855651248, -0.000860659210123161, -0.000392901992572746])
vVesta=vsun + convert.(T,[-0.010174496747119257, 0.000041478190529952, 0.001344157634155624])
vIris=vsun + convert.(T,[0.002786950314570632, 0.011314057384917047, 0.004975132577079665])
vBamberga=vsun + convert.(T,[0.007164363244556328, 0.009219958777618218, 0.006857861727407507])

   
    
qq = [qq; qMoon; qCeres; qPallas; qVesta; qIris; qBamberga]
vv = [vv; vMoon; vCeres; vPallas; vVesta; vIris; vBamberga]

qqinterior = [qq[1:15]; qMoon; qCeres; qPallas; qVesta; qIris; qBamberga]
vvinterior = [vv[1:15]; vMoon; vCeres; vPallas; vVesta; vIris; vBamberga]    

Gmint = [Gm[1:5]; Gm[11:16] ]
    
q0int = reshape(qqinterior,3,:)
v0int = reshape(vvinterior,3,:)

GmISS = sum(Gmint)   
qISS = [sum(Gmint .* q0int[j,:])/GmISS for j in 1:3]
vISS = [sum(Gmint .* v0int[j,:])/GmISS for j in 1:3]    

Gm = [GmISS; Gm[6:9]] 
N = length(Gm)    
qq = [qISS; qq[16:27]]  
vv = [vISS; vv[16:27]]      

    
q0 = reshape(qq,3,:)
v0 = reshape(vv,3,:)

q0bar = [sum(Gm .* q0[j,:])/sum(Gm) for j in 1:3]
v0bar = [sum(Gm .* v0[j,:])/sum(Gm) for j in 1:3]

q0 .= q0 .- q0bar
v0 .= v0 .- v0bar
  
u0 = Array{T}(undef,3,N,2)
u0[:,:,1] .= q0
u0[:,:,2] .= v0
bodylist = ["Barneko Eguzki Sistema" "Jupiter" "Saturno" "Urano" "Neptuno"]

    
Gm[5] *= 1.05  # Masa estimada de Neptuno antes de Standish (1992)    
    
return u0, Gm, bodylist
end





function DatosInicialesSistemaSolar(T=Float64)
GmMoon = convert(T,0.109318945074237400e-10)
GmEarth = convert(T,0.888769244512563400e-9)

Gm =convert.(T, [0.295912208285591100e-3, 0.491248045036476000e-10,
  0.724345233264412000e-9,
  GmEarth,
  0.954954869555077000e-10, 0.282534584083387000e-6,
  0.845970607324503000e-7, 0.129202482578296000e-7,
  0.152435734788511000e-7, 0.217844105197418000e-11, GmMoon,
# Ceres, Pallas, Vesta, Iris, Bamberga
  0.140047655617234400e-12,
  0.310444819893871300e-13,
  0.385475018780881000e-13,
  0.213643444257140700e-14,
  0.138862658985619900e-14
  ])

N=length(Gm)

q = convert.(T, [0.00450250878464055477, 0.00076707642709100705,
   0.00026605791776697764,
       0.36176271656028195477, -0.09078197215676599295,
-0.08571497256275117236,
     0.61275194083507215477, -0.34836536903362219295,
-0.19527828667594382236,
   0.12051741410138465477, -0.92583847476914859295,
-0.40154022645315222236,
   -0.11018607714879824523, -1.32759945030298299295,
-0.60588914048429142236,
   -5.37970676855393644523, -0.83048132656339789295,
-0.22482887442656542236,
   7.89439068290953155477, 4.59647805517127300705,
   1.55869584283189997764,
   -18.26540225387235944523, -1.16195541867586999295,
-0.25010605772133802236,
   -16.05503578023336944523, -23.94219155985470899295,
-9.40015796880239402236,
   -30.48331376718383944523, -0.87240555684104999295,
   8.91157617249954997764
])

v = convert.(T,[-0.00000035174953607552, 0.00000517762640983341,
   0.00000222910217891203,
        0.00336749397200575848, 0.02489452055768343341,
   0.01294630040970409203,
       0.01095206842352823448, 0.01561768426786768341,
   0.00633110570297786403,
   0.01681126830978379448,
   0.00174830923073434441, 0.00075820289738312913,
       0.01448165305704756448,
   0.00024246307683646861, -0.00028152072792433877,
       0.00109201259423733748, -0.00651811661280738459,
-0.00282078276229867897,
      -0.00321755651650091552, 0.00433581034174662541,
   0.00192864631686015503,
      0.00022119039101561468, -0.00376247500810884459,
-0.00165101502742994997,
      0.00264276984798005548, -0.00149831255054097759,
-0.00067904196080291327,
      0.00032220737349778078, -0.00314357639364532859,
-0.00107794975959731297
])
    
dqMoon = convert.(T,[-0.00080817735147818490, -0.0019946299854970130, -0.00108726268307068900])
dvMoon = convert.(T,[0.00060108481561422370, -0.00016744546915764980, -0.00008556214140094871]);

qq = copy(q)
vv = copy(v)



qEM = q[10:12]
qEarth = qEM - GmMoon/GmEarth*dqMoon
qMoon = qEarth + dqMoon
qq[10:12] .= qEarth

vEM = v[10:12]
vEarth = vEM - GmMoon/GmEarth*dvMoon
vMoon = vEarth + dvMoon
vv[10:12] .= vEarth



# Ceres, Pallas, Vesta, Iris, Bamberga
qsun=qq[1:3]
qCeres=qsun + convert.(T,[1.438681809676469747, -2.204373633189407045, -1.326397853361325874])
qPallas=qsun + convert.(T,[0.203832272462290465, -3.209619436062307152, 0.623843179079393351])
qVesta=qsun + convert.(T,[0.182371836377417107,  2.386628211277654010, 0.924596062836265498])
qIris=qsun + convert.(T,[1.892475267790300286, -0.848414748075139946, -0.157159319044464590])
qBamberga=qsun + convert.(T,[1.398759064223541682, -1.287476729008325105, -0.669098428660833799])

vsun=vv[1:3]
vCeres=vsun + convert.(T,[0.008465406136316316, 0.004684247977335608, 0.000466157738595739])
vPallas=vsun + convert.(T,[0.008534313855651248, -0.000860659210123161, -0.000392901992572746])
vVesta=vsun + convert.(T,[-0.010174496747119257, 0.000041478190529952, 0.001344157634155624])
vIris=vsun + convert.(T,[0.002786950314570632, 0.011314057384917047, 0.004975132577079665])
vBamberga=vsun + convert.(T,[0.007164363244556328, 0.009219958777618218, 0.006857861727407507])



qq = [qq; qMoon; qCeres; qPallas; qVesta; qIris; qBamberga]
vv = [vv; vMoon; vCeres; vPallas; vVesta; vIris; vBamberga]

q0 = reshape(qq,3,:)
v0 = reshape(vv,3,:)

q0bar = [sum(Gm .* q0[j,:])/sum(Gm) for j in 1:3]
v0bar = [sum(Gm .* v0[j,:])/sum(Gm) for j in 1:3]

q0 .= q0 .- q0bar
v0 .= v0 .- v0bar

u0 = Array{T}(undef,3,N,2)
u0[:,:,2] .= v0
u0[:,:,1] .= q0
bodylist = ["Sol" "Mercurio" "Venus" "Tierra" "Marte" "Jupiter" "Saturno" "Urano" "Neptuno" "Plut√≥n" "Luna" "Ceres" "Pallas" "Vesta" "Iris" "Bamberga"]

return u0, Gm, bodylist
end

function NbodyODE2!(du,u,Gm,t)
     N = length(Gm)
     du[:,:,2] .= 0
     for i in 1:N
        xi = u[1,i,1]
        yi = u[2,i,1]
        zi = u[3,i,1]
        Gmi = Gm[i] 
        for j in (i+1):N
           xij = xi - u[1,j,1]
           yij = yi - u[2,j,1]
           zij = zi - u[3,j,1]
           Gmj = Gm[j] 
           dotij = xij^2+yij^2+zij^2
           auxij = 1/(sqrt(dotij)*dotij) 
           du[1,i,2] -= Gmj*auxij*xij
           du[1,j,2] += Gmi*auxij*xij
           du[2,i,2] -= Gmj*auxij*yij
           du[2,j,2] += Gmi*auxij*yij
           du[3,i,2] -= Gmj*auxij*zij
           du[3,j,2] += Gmi*auxij*zij
        end
     end
    du[:,:,1] .= u[:,:,2]  
    return nothing
end


